#include <iostream>
using namespace std;

int massiv(int* M, int size); // прототип функции для одномерного массива

void matrix(); // прототип функции для работы с матрицей

int main(void)
{
	setlocale(LC_CTYPE, "Russian"); 
	int choice; 
	do // меню пользователя
	{
		cout << "Выберите вариант работы" << endl;
		cout << "1 - с одномерным массивом" << endl;
		cout << "2 - с матрицей" << endl;
		cout << "3 - выход" << endl;
		cin >> choice;
		switch (choice)
		{
		case 1: {
			// работа с массивом
			int* M, size, i, av;
			cout << "Введите размер массива "; 
			cin >> size;

			M = new int[size]; // выделяем памяти для массива
			for (i = 0; i < size; i++)
			{
				cout << "Введите " << i + 1 << " число ";
				cin >> *(M + i);
			}

			av = massiv(M, size); // вызов функции для обработки массива и получение результата
			cout << "Результат=" << av << endl;

			delete[] M; // освобождаем память
			break;
		}
		case 2:
			// работа с матрицей
			matrix();
			break;
		case 3:
			break; // завершение работы программы при "3"

		default: // если пользователь ввел некорретный символ в меню
			cout << "Некорректный выбор, попробуйте снова." << endl;
		}
	} while (choice != 3); // цикл продолжается, пока выбор не равен 3 (выход)
}


int massiv(int* M, int size) // функция для обработки одномерного массива
{
	int sum = 0, avar; // сумма элементов массива и переменная для среднего значения
	for (int i = 0; i < size; i++)
		sum += *(M + i); // подсчет суммы элементов массива
	avar = sum / size;   // вычисление среднего значения
	return avar; // возврат результата
}

void matrix() // Функция для обработки матрицы
{
	int** A, row, col, i, j, m; // переменные для работы с матрицей
	cout << "Введите число строк матрицы "; // запрос числа строк
	cin >> row;
	cout << "Введите чиcло столбцов "; // запрос числа столбцов
	cin >> col;

	A = new int* [row]; // выделяем память для матрицы
	for (i = 0; i < row; i++)
		A[i] = new int[col];

	for (i = 0; i < row; i++) // вводим элементы матрицы
		for (j = 0; j < col; j++)
		{
			cout << "Введите A[" << i << "],[" << j << "]= ";
			cin >> *(*(A + i) + j);
		}

	m = A[0][0]; // инициализация максимального элемента
	for (i = 0; i < row; i++) // ищем максимальный элемент в матрице
		for (j = 0; j < col; j++)
			if (*(*(A + i) + j) > m)
				m = *(*(A + i) + j); // обновляем максимальный элемент

	cout << "Результат=" << m << endl; 

	for (i = 0; i < row; i++)
		delete[] A[i]; 
	delete[] A; // освобождаем память матрицы
}
